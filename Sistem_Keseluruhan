/*
 * SISTEM TRACKING LENGKAP - ARDUINO MEGA 2560
 * Menggabungkan LDR Tracking, FLC Tracking, dan Monitoring Daya
 * 
 * Hardware yang dibutuhkan:
 * - 2x LDR sensor (A0, A1)
 * - 1x Servo motor MG996 (pin 9)
 * - 1x LCD I2C (alamat 0x27)
 * - 2x INA219 sensor (alamat 0x40, 0x41)
 * - 1x Push button untuk mode selection (pin 2)
 * - 1x SD Card Module (SPI: 50-53)
 * - 1x RTC DS3231 (I2C: SDA=20, SCL=21)
 * - 1x MPU6050 (I2C)
 * - 1x Solar Charge Controller monitoring
 */

#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_INA219.h>
#include <SD.h>
#include <RTClib.h>
#include <MPU6050.h>

// =====================
// KONFIGURASI HARDWARE ARDUINO MEGA 2560
// =====================
#define LDR_LEFT     A0
#define LDR_RIGHT    A1
#define SERVO_PIN    9
#define BUTTON_PIN   2

// SD Card pins (Arduino MEGA 2560)
#define SD_CS_PIN    53
#define SD_MOSI_PIN  51
#define SD_MISO_PIN  50
#define SD_SCK_PIN   52

// Inisialisasi komponen
Servo myServo;
LiquidCrystal_I2C lcd(0x27, 16, 2);
Adafruit_INA219 ina219_1(0x40);
Adafruit_INA219 ina219_2(0x41);
RTC_DS3231 rtc;
MPU6050 mpu;

// =====================
// VARIABEL GLOBAL
// =====================
// Mode operasi
enum Mode {
  MODE_LDR_TRACKING = 0,
  MODE_FLC_TRACKING = 1,
  MODE_HYBRID = 2
};
Mode currentMode = MODE_LDR_TRACKING;

// Variabel servo
float servoAngle = 90.0;
int targetPos = 90;
int setpoint = 90;

// Variabel LDR
int ldr1_raw, ldr2_raw;
float ldr1, ldr2;
float ldr_diff;

// Variabel INA219
float busVoltage1, current1, power1;
float busVoltage2, current2, power2;

// Variabel MPU6050
float mpu_angle_x, mpu_angle_y, mpu_angle_z;
float mpu_accel_x, mpu_accel_y, mpu_accel_z;
float mpu_gyro_x, mpu_gyro_y, mpu_gyro_z;

// Variabel RTC
DateTime now;

// Variabel timing
unsigned long lastUpdate = 0;
unsigned long lastLcdSwitch = 0;
unsigned long lastSetpointChange = 0;
unsigned long lastDataLog = 0;
const unsigned long samplingTime = 100; // 100ms
const unsigned long lcdSwitchTime = 3000; // 3 detik
const unsigned long setpointInterval = 5000; // 5 detik
const unsigned long dataLogInterval = 1000; // 1 detik

// Variabel FLC
#define DELTA_ERROR_MIN   -45
#define DELTA_ERROR_MAX    45
#define DELTA_ANGLE_MIN   -10
#define DELTA_ANGLE_MAX    10

// Membership Function Center
const int NB = -1000;
const int NS = -1;
const int ZO =  0;
const int PS =  1;
const int PB =  2;

// Output FLC
const float outputMF[5] = { -0.5, -0.25, 0, 0.25, 0.5 };

// Rule base
const int ruleBase[5] = {0, 1, 2, 3, 4};

// Variabel test sequence
int stepCount = 0;
const int stepSequence[] = {90, 60, 90, 120, 90};
const int numSteps = 5;

// Variabel LCD
int lcdPage = 0;

// Variabel data logging
File dataFile;
String dataFileName = "";

// =====================
// FUNGSI FUZZY LOGIC
// =====================
float mf_tri(float x, float a, float b, float c) {
  if (x <= a || x >= c) return 0;
  else if (x == b) return 1;
  else if (x < b) return (x - a) / (b - a);
  else return (c - x) / (c - b);
}

void fuzzify_delta_error(float x, float* mf) {
  mf[0] = mf_tri(x, -45, -45, -22.5);   // NB
  mf[1] = mf_tri(x, -45, -22.5, 0);     // NS
  mf[2] = mf_tri(x, -22.5, 0, 22.5);    // ZO
  mf[3] = mf_tri(x, 0, 22.5, 45);       // PS
  mf[4] = mf_tri(x, 22.5, 45, 45);      // PB
}

float fuzzyController(float delta_error) {
  float mf_error[5], output[5] = {0,0,0,0,0};
  
  // Fuzzifikasi delta_error
  fuzzify_delta_error(delta_error, mf_error);
  
  // Inferensi (Mamdani)
  for (int i = 0; i < 5; i++) {
    if (mf_error[i] > output[i]) output[i] = mf_error[i];
  }
  
  // Defuzzifikasi (COG)
  float num = 0, den = 0;
  for (int k = 0; k < 5; k++) {
    num += output[k] * outputMF[k];
    den += output[k];
  }
  if (den == 0) return 0;
  return num / den;
}

// =====================
// FUNGSI BACA SENSOR
// =====================
void bacaLDR() {
  ldr1_raw = analogRead(LDR_LEFT);
  ldr2_raw = analogRead(LDR_RIGHT);
  
  // Kalibrasi LDR
  ldr1 = ldr1_raw * 0.50;
  ldr2 = ldr2_raw;
  
  // Hitung selisih
  ldr_diff = ldr2 - ldr1;
  ldr_diff = constrain(ldr_diff, -500, 500);
}

void bacaINA219() {
  busVoltage1 = ina219_1.getBusVoltage_V();
  current1 = ina219_1.getCurrent_mA() / 1000.0; // A
  power1 = busVoltage1 * current1;
  
  busVoltage2 = ina219_2.getBusVoltage_V();
  current2 = ina219_2.getCurrent_mA() / 1000.0; // A
  power2 = busVoltage2 * current2;
}

void bacaMPU6050() {
  // Baca accelerometer dan gyroscope
  mpu.getMotion6(&mpu_accel_x, &mpu_accel_y, &mpu_accel_z, 
                 &mpu_gyro_x, &mpu_gyro_y, &mpu_gyro_z);
  
  // Hitung sudut dari accelerometer (dalam derajat)
  mpu_angle_x = atan2(mpu_accel_y, mpu_accel_z) * 180 / PI;
  mpu_angle_y = atan2(-mpu_accel_x, sqrt(mpu_accel_y * mpu_accel_y + mpu_accel_z * mpu_accel_z)) * 180 / PI;
  
  // Kalibrasi offset (sesuaikan dengan mounting)
  mpu_angle_x -= 0; // Offset X jika diperlukan
  mpu_angle_y -= 0; // Offset Y jika diperlukan
}

void bacaRTC() {
  now = rtc.now();
}

// =====================
// FUNGSI KONTROL SERVO
// =====================
void kontrolLDRTracking() {
  // Deteksi kondisi gelap
  if (ldr1_raw < 100 && ldr2_raw < 100) {
    targetPos = servoAngle; // tahan posisi
  } else {
    targetPos = map(ldr_diff, -500, 500, 0, 180);
    targetPos = constrain(targetPos, 0, 180);
  }
  
  // Gerakkan servo perlahan
  if (servoAngle < targetPos) servoAngle += 0.5;
  else if (servoAngle > targetPos) servoAngle -= 0.5;
  
  servoAngle = constrain(servoAngle, 0, 180);
  myServo.write((int)servoAngle);
}

void kontrolFLCTracking() {
  // Hitung delta error
  float delta_error = setpoint - servoAngle;
  
  // Aplikasikan FLC
  float delta_angle = fuzzyController(delta_error);
  
  // Update servo angle
  servoAngle += delta_angle;
  servoAngle = constrain(servoAngle, 0, 180);
  
  myServo.write((int)servoAngle);
}

void kontrolHybrid() {
  // Kombinasi LDR dan FLC
  float ldr_weight = 0.7; // Bobot LDR
  float flc_weight = 0.3; // Bobot FLC
  
  // Target dari LDR
  int ldr_target;
  if (ldr1_raw < 100 && ldr2_raw < 100) {
    ldr_target = servoAngle;
  } else {
    ldr_target = map(ldr_diff, -500, 500, 0, 180);
    ldr_target = constrain(ldr_target, 0, 180);
  }
  
  // Setpoint hybrid
  setpoint = (ldr_weight * ldr_target) + (flc_weight * setpoint);
  
  // Aplikasikan FLC untuk tracking
  float delta_error = setpoint - servoAngle;
  float delta_angle = fuzzyController(delta_error);
  
  servoAngle += delta_angle;
  servoAngle = constrain(servoAngle, 0, 180);
  
  myServo.write((int)servoAngle);
}

// =====================
// FUNGSI LCD DISPLAY
// =====================
void updateLCD() {
  unsigned long now = millis();
  
  // Ganti halaman LCD setiap 3 detik
  if (now - lastLcdSwitch >= lcdSwitchTime) {
    lcdPage = (lcdPage + 1) % 4; // 4 halaman sekarang
    lastLcdSwitch = now;
    lcd.clear();
  }
  
  switch (lcdPage) {
    case 0: // Halaman LDR dan Servo
      lcd.setCursor(0, 0);
      lcd.print("L1:"); lcd.print(ldr1_raw);
      lcd.print(" L2:"); lcd.print(ldr2_raw);
      lcd.setCursor(0, 1);
      lcd.print("Servo:"); lcd.print(servoAngle, 1);
      lcd.print((char)223);
      break;
      
    case 1: // Halaman INA219
      lcd.setCursor(0, 0);
      lcd.print("INA1:");
      lcd.print(busVoltage1, 1); lcd.print("V");
      lcd.print(current1, 2); lcd.print("A");
      lcd.setCursor(0, 1);
      lcd.print("INA2:");
      lcd.print(busVoltage2, 1); lcd.print("V");
      lcd.print(current2, 2); lcd.print("A");
      break;
      
    case 2: // Halaman MPU6050
      lcd.setCursor(0, 0);
      lcd.print("MPU X:"); lcd.print(mpu_angle_x, 1);
      lcd.print(" Y:"); lcd.print(mpu_angle_y, 1);
      lcd.setCursor(0, 1);
      lcd.print("Time:"); 
      lcd.print(now.hour(), DEC); lcd.print(":");
      lcd.print(now.minute(), DEC);
      break;
      
    case 3: // Halaman Mode dan Power
      lcd.setCursor(0, 0);
      switch (currentMode) {
        case MODE_LDR_TRACKING: lcd.print("Mode: LDR Track"); break;
        case MODE_FLC_TRACKING: lcd.print("Mode: FLC Track"); break;
        case MODE_HYBRID: lcd.print("Mode: Hybrid"); break;
      }
      lcd.setCursor(0, 1);
      lcd.print("P1:"); lcd.print(power1, 2); lcd.print("W");
      lcd.print(" P2:"); lcd.print(power2, 2); lcd.print("W");
      break;
  }
}

// =====================
// FUNGSI BUTTON HANDLER
// =====================
void handleButton() {
  static bool lastButtonState = HIGH;
  static unsigned long lastDebounceTime = 0;
  const unsigned long debounceDelay = 50;
  
  bool buttonState = digitalRead(BUTTON_PIN);
  
  if (buttonState != lastButtonState) {
    lastDebounceTime = millis();
  }
  
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (buttonState == LOW) { // Button pressed
      currentMode = (Mode)((currentMode + 1) % 3);
      
      // Reset variabel untuk mode baru
      stepCount = 0;
      setpoint = 90;
      servoAngle = 90;
      myServo.write(90);
      
      // Tampilkan mode baru di LCD
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Mode Changed to:");
      lcd.setCursor(0, 1);
      switch (currentMode) {
        case MODE_LDR_TRACKING: lcd.print("LDR Tracking"); break;
        case MODE_FLC_TRACKING: lcd.print("FLC Tracking"); break;
        case MODE_HYBRID: lcd.print("Hybrid Mode"); break;
      }
      delay(2000);
      lcd.clear();
    }
  }
  
  lastButtonState = buttonState;
}

// =====================
// FUNGSI TEST SEQUENCE
// =====================
void updateTestSequence() {
  unsigned long now = millis();
  
  if (now - lastSetpointChange >= setpointInterval && stepCount < numSteps && abs(setpoint - servoAngle) < 0.5) {
    setpoint = stepSequence[stepCount];
    stepCount++;
    lastSetpointChange = now;
    
    Serial.print("*** SETPOINT BERUBAH: Step ");
    Serial.print(stepCount-1);
    Serial.print(" -> ");
    Serial.print(setpoint);
    Serial.println(" derajat ***");
  }
}

// =====================
// FUNGSI DATA LOGGING
// =====================
void setupDataLogging() {
  // Buat nama file berdasarkan tanggal
  dataFileName = "TRACK_";
  dataFileName += String(now.year(), DEC);
  dataFileName += String(now.month(), DEC);
  dataFileName += String(now.day(), DEC);
  dataFileName += "_";
  dataFileName += String(now.hour(), DEC);
  dataFileName += String(now.minute(), DEC);
  dataFileName += ".csv";
  
  // Buat header file
  dataFile = SD.open(dataFileName, FILE_WRITE);
  if (dataFile) {
    dataFile.println("DateTime,Mode,Servo(deg),Setpoint,LDR1,LDR2,INA1_V,INA1_A,INA1_W,INA2_V,INA2_A,INA2_W,MPU_X,MPU_Y,MPU_Z");
    dataFile.close();
    Serial.print("Data logging dimulai: ");
    Serial.println(dataFileName);
  } else {
    Serial.println("Error membuka file untuk logging!");
  }
}

void logData() {
  unsigned long now = millis();
  
  if (now - lastDataLog >= dataLogInterval) {
    lastDataLog = now;
    
    dataFile = SD.open(dataFileName, FILE_WRITE);
    if (dataFile) {
      // Timestamp
      dataFile.print(now.year(), DEC);
      dataFile.print("/");
      dataFile.print(now.month(), DEC);
      dataFile.print("/");
      dataFile.print(now.day(), DEC);
      dataFile.print(" ");
      dataFile.print(now.hour(), DEC);
      dataFile.print(":");
      dataFile.print(now.minute(), DEC);
      dataFile.print(":");
      dataFile.print(now.second(), DEC);
      dataFile.print(",");
      
      // Data sensor
      dataFile.print(currentMode);
      dataFile.print(",");
      dataFile.print(servoAngle, 2);
      dataFile.print(",");
      dataFile.print(setpoint);
      dataFile.print(",");
      dataFile.print(ldr1_raw);
      dataFile.print(",");
      dataFile.print(ldr2_raw);
      dataFile.print(",");
      dataFile.print(busVoltage1, 2);
      dataFile.print(",");
      dataFile.print(current1, 3);
      dataFile.print(",");
      dataFile.print(power1, 3);
      dataFile.print(",");
      dataFile.print(busVoltage2, 2);
      dataFile.print(",");
      dataFile.print(current2, 3);
      dataFile.print(",");
      dataFile.print(power2, 3);
      dataFile.print(",");
      dataFile.print(mpu_angle_x, 2);
      dataFile.print(",");
      dataFile.print(mpu_angle_y, 2);
      dataFile.print(",");
      dataFile.println(mpu_angle_z, 2);
      
      dataFile.close();
    }
  }
}

// =====================
// SETUP
// =====================
void setup() {
  Serial.begin(9600);
  
  // Setup pin
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  
  // Setup servo
  myServo.attach(SERVO_PIN);
  myServo.write(servoAngle);
  
  // Setup LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Sistem Tracking");
  lcd.setCursor(0, 1);
  lcd.print("MEGA 2560 Ready!");
  delay(2000);
  lcd.clear();
  
  // Setup SD Card
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("SD Card gagal!");
    lcd.setCursor(0, 0);
    lcd.print("SD Card Error!");
    delay(2000);
  } else {
    Serial.println("SD Card OK!");
  }
  
  // Setup RTC
  if (!rtc.begin()) {
    Serial.println("RTC DS3231 gagal!");
    lcd.setCursor(0, 0);
    lcd.print("RTC Error!");
    delay(2000);
  } else {
    Serial.println("RTC DS3231 OK!");
    // Set waktu jika diperlukan (uncomment jika perlu set waktu)
    // rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
  
  // Setup MPU6050
  Wire.begin();
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 gagal!");
    lcd.setCursor(0, 0);
    lcd.print("MPU6050 Error!");
    delay(2000);
  } else {
    Serial.println("MPU6050 OK!");
    // Kalibrasi MPU6050
    mpu.setXAccelOffset(0);
    mpu.setYAccelOffset(0);
    mpu.setZAccelOffset(0);
    mpu.setXGyroOffset(0);
    mpu.setYGyroOffset(0);
    mpu.setZGyroOffset(0);
  }
  
  // Setup INA219
  if (!ina219_1.begin()) {
    Serial.println("INA219 #1 gagal!");
    lcd.setCursor(0, 0);
    lcd.print("INA219 #1 Error!");
    delay(2000);
  } else {
    Serial.println("INA219 #1 OK!");
  }
  if (!ina219_2.begin()) {
    Serial.println("INA219 #2 gagal!");
    lcd.setCursor(0, 0);
    lcd.print("INA219 #2 Error!");
    delay(2000);
  } else {
    Serial.println("INA219 #2 OK!");
  }
  
  // Setup data logging
  bacaRTC();
  setupDataLogging();
  
  // Tampilkan mode awal
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Mode: LDR Tracking");
  lcd.setCursor(0, 1);
  lcd.print("Press BTN to change");
  delay(3000);
  lcd.clear();
  
  Serial.println("Sistem Tracking Lengkap MEGA 2560 Siap!");
  Serial.println("DateTime,Mode,Servo(deg),Setpoint,LDR1,LDR2,INA1_V,INA1_A,INA1_W,INA2_V,INA2_A,INA2_W,MPU_X,MPU_Y,MPU_Z");
}

// =====================
// LOOP UTAMA
// =====================
void loop() {
  unsigned long now = millis();
  
  // Handle button press
  handleButton();
  
  // Sampling time 100ms
  if (now - lastUpdate >= samplingTime) {
    lastUpdate = now;
    
    // Baca semua sensor
    bacaLDR();
    bacaINA219();
    bacaMPU6050();
    bacaRTC();
    
    // Kontrol servo berdasarkan mode
    switch (currentMode) {
      case MODE_LDR_TRACKING:
        kontrolLDRTracking();
        break;
        
      case MODE_FLC_TRACKING:
        updateTestSequence();
        kontrolFLCTracking();
        break;
        
      case MODE_HYBRID:
        updateTestSequence();
        kontrolHybrid();
        break;
    }
    
    // Update LCD
    updateLCD();
    
    // Log data ke SD Card
    logData();
    
    // Print ke Serial Monitor (format CSV)
    Serial.print(now.year(), DEC);
    Serial.print("/");
    Serial.print(now.month(), DEC);
    Serial.print("/");
    Serial.print(now.day(), DEC);
    Serial.print(" ");
    Serial.print(now.hour(), DEC);
    Serial.print(":");
    Serial.print(now.minute(), DEC);
    Serial.print(":");
    Serial.print(now.second(), DEC);
    Serial.print(",");
    Serial.print(currentMode);
    Serial.print(",");
    Serial.print(servoAngle, 2);
    Serial.print(",");
    Serial.print(setpoint);
    Serial.print(",");
    Serial.print(ldr1_raw);
    Serial.print(",");
    Serial.print(ldr2_raw);
    Serial.print(",");
    Serial.print(busVoltage1, 2);
    Serial.print(",");
    Serial.print(current1, 3);
    Serial.print(",");
    Serial.print(power1, 3);
    Serial.print(",");
    Serial.print(busVoltage2, 2);
    Serial.print(",");
    Serial.print(current2, 3);
    Serial.print(",");
    Serial.print(power2, 3);
    Serial.print(",");
    Serial.print(mpu_angle_x, 2);
    Serial.print(",");
    Serial.print(mpu_angle_y, 2);
    Serial.print(",");
    Serial.println(mpu_angle_z, 2);
  }
  
  delay(10); // Delay kecil untuk stabilitas
} 
